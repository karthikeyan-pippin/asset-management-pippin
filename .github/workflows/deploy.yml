name: Deploy Node App to GCP MIG

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      PROJECT_NUMBER: ${{ secrets.PROJECT_NUMBER }}
      ZONE: ${{ secrets.ZONE }} # e.g. us-central1-a
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4   # ðŸ‘ˆ ensures workspace is not empty 
    
      - name: List repo files for debug
        run: |
          ls -l ./.github/workflows/startup.sh

      - name: Debug GitHub OIDC Claims
        run: |
          export ID_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=google-cloud")
          echo "Raw OIDC Token:"
          echo "$ID_TOKEN" | cut -c1-200
          echo "----"
          echo "Decoded Claims:"
          echo "$ID_TOKEN" | jq -R 'split(".") | .[1] | @base64d | fromjson'

      - id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/432222429753/locations/global/workloadIdentityPools/github-assets-action/providers/github-assets'
          service_account: github-action-assets-deploy@gmapsdevdemoqa.iam.gserviceaccount.com   


      - name: Prepare template name and git ref
        id: vars
        run: |
         echo "TEMPLATE_NAME=node-template-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
         echo "GIT_REF=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Create new instance template (uses startup.sh from repo)
        run: |
          TEMPLATE=${{ steps.vars.outputs.TEMPLATE_NAME }}
          # Pass git_ref metadata so the startup script checks out the exact commit
          gcloud compute instance-templates create "$TEMPLATE" \
            --project="${{ env.PROJECT_ID }}" \
            --machine-type=e2-standard-2 \
            --image-family=ubuntu-2204-lts  \
            --image-project=ubuntu-os-cloud \
            --boot-disk-size=20GB \
            --boot-disk-type=pd-standard \
            --metadata=git_ref=${{ steps.vars.outputs.GIT_REF }} \
            --metadata-from-file startup-script=./.github/workflows/startup.sh \
            --tags=http-server
      
      - name: Delete old node-template-* instance templates
        run: |
          OLD_TEMPLATES=$(gcloud compute instance-templates list \
            --project=${{ secrets.PROJECT_ID }} \
            --filter="name ~ ^node-template-" \
            --format="value(name)" \
            --sort-by=~creationTimestamp | tail -n +2)

          if [ -n "$OLD_TEMPLATES" ]; then
           echo "Deleting old templates: $OLD_TEMPLATES"
           for tmpl in $OLD_TEMPLATES; do
           gcloud compute instance-templates delete "$tmpl" \
             --project=${{ secrets.PROJECT_ID }} -q || echo "Template $tmpl not found, skipping."
           done
           else
           echo "No old node-templates to delete."
          fi

          # Verify template was created
        echo "Verifying template creation..."
        gcloud compute instance-templates describe "$TEMPLATE" --project="${{ env.PROJECT_ID }}"
          
